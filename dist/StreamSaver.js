function _classCallCheck(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,r){for(var t=0;t<r.length;t++){var o=r[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(r,t,o){return t&&e(r.prototype,t),o&&e(r,o),r}}(),_this=this,_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e,r){"undefined"!=typeof module?module.exports=r():"function"==typeof define&&"object"==_typeof(define.amd)?define(r):_this.StreamSaver=r()}(0,function(){"use strict";return function(){function e(){var r=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=t.scope,n=void 0===o?"./StreamSaverDownloads":o,i=t.serviceWorkerPath,s=void 0===i?"StreamSaverServiceWorker.js":i;if(_classCallCheck(this,e),"https:"!==location.protocol&&"localhost"!==location.hostname)throw Error("StreamSaver.js needs to be served via HTTPS or on localhost");this._serviceWorker,this._onServiceWorkerPromises=[],navigator.serviceWorker.getRegistration(n).then(function(e){return e||navigator.serviceWorker.register(s,{scope:n})}).then(function(e){var t=e.installing||e.waiting||e.active;r._serviceWorker=t,r._onServiceWorkerPromises.forEach(function(e){return e.resolve(t)}),r._onServiceWorkerPromises=[]}).catch(function(e){throw r._onServiceWorkerPromises.forEach(function(r){return r.reject(e)}),r._onServiceWorkerPromises=[],e})}return _createClass(e,[{key:"getServiceWorker",value:function(){var e=this;return new Promise(function(r,t){return e._serviceWorker?r(e._serviceWorker):e._onServiceWorkerPromises.push({resolve:r,reject:t})})}},{key:"createStream",value:function(e,r){var t=new MessageChannel,o=this;return new WritableStream({start:function(r){return o.getServiceWorker().then(function(r){return new Promise(function(o,n){t.port1.onmessage=function(e){if(!e.data)return n("Service worker did not provide download url");var r=document.createElement("a");return r.href=e.data,r.dispatchEvent(new MouseEvent("click")),o()},r.postMessage(JSON.stringify(e),[t.port2])})})},write:function(e){return new Promise(function(r,o){t.port1.postMessage(e),t.port1.onmessage=r})},close:function(){t.port1.postMessage("close")},abort:function(){t.port1.postMessage("abort")}},r)}}],[{key:"supported",get:function(){try{return"serviceWorker"in navigator&&!!new ReadableStream&&!!new WritableStream}catch(e){return!1}}}]),e}()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
